{
  "primary key": {
    "prefix": [
      "db_primary_key",
      "primary key"
    ],
    "scope": "javascript,typescript",
    "body": "id: column.number({ primaryKey: true }),",
    "description": "Primary key column (number, primaryKey: true)",
  },
  "text": {
    "prefix": [
      "db_text",
      "text"
    ],
    "scope": "javascript,typescript",
    "body": "${1:name}: column.text(),",
    "description": "Text column",
  },
  "number": {
    "prefix": [
      "db_number",
      "number"
    ],
    "scope": "javascript,typescript",
    "body": "${1:name}: column.number(),",
    "description": "Number column",
  },
  "boolean": {
    "prefix": [
      "db_boolean",
      "boolean"
    ],
    "scope": "javascript,typescript",
    "body": "${1:name}: column.boolean(),",
    "description": "Boolean column",
  },
  "date": {
    "prefix": [
      "db_date",
      "date"
    ],
    "scope": "javascript,typescript",
    "body": "${1:name}: column.date({ default: NOW }),",
    "description": "Date column with default NOW",
  },
  "json": {
    "prefix": [
      "db_json",
      "json"
    ],
    "scope": "javascript,typescript",
    "body": "${1:name}: column.json(),",
    "description": "JSON column",
  },
  "references": {
    "prefix": [
      "db_references",
      "int references"
    ],
    "scope": "javascript,typescript",
    "body": "${1:name}Id: int('${1:name}_id').references(() => ${2:table}.${3:column}),",
    "description": "Reference to another table",
  },
  "select": {
    "prefix": [
      "db_select",
      "select"
    ],
    "scope": "javascript,typescript",
    "body": [
      "await db.select({",
      "\t\t$1,",
      "\t})",
      "\t.from(${2:table})",
      "\t.where(",
      "\t\t$3,",
      "\t);",
      ""
    ],
    "description": "Select query",
  },
  "selectDistinct": {
    "prefix": [
      "db_select_distinct",
      "selectDistinct"
    ],
    "scope": "javascript,typescript",
    "body": [
      "await db.selectDistinct({",
      "\t\t$1,",
      "\t})",
      "\t.from(${2:table})",
      "\t.where(",
      "\t\t$3,",
      "\t);",
      ""
    ],
    "description": "Select distinct query",
  },
  "selectDistinctOn": {
    "prefix": [
      "db_select_distinct_on",
      "selectDistinctOn"
    ],
    "scope": "javascript,typescript",
    "body": [
      "await db.selectDistinctOn([",
      "\t\t$1,",
      "\t]), {",
      "\t\t$2,",
      "\t})",
      "\t.from(${3:table})",
      "\t.where(",
      "\t\t$4,",
      "\t);",
      ""
    ],
    "description": "Select distinct on query",
  },
  "limit & offset": {
    "prefix": [
      "db_limit",
      "limit"
    ],
    "scope": "javascript,typescript",
    "body": [
      "await db.select({",
      "\t\t$1,",
      "\t})",
      "\t.from(${2:table})",
      "\t.limit(${3:limit})",
      "\t.offset(${4:offset});",
      ""
    ],
    "description": "Select with limit and offset",
  },
  "orderBy": {
    "prefix": [
      "db_order_by",
      "orderBy"
    ],
    "scope": "javascript,typescript",
    "body": [
      "await db.select({",
      "\t\t$1,",
      "\t})",
      "\t.from(${2:table})",
      "\t.orderBy(${3:column});",
      ""
    ],
    "description": "Select with order by",
  },
  "groupBy": {
    "prefix": [
      "db_group_by",
      "groupBy"
    ],
    "scope": "javascript,typescript",
    "body": [
      "await db.select({",
      "\t\t$1,",
      "\t})",
      "\t.from(${2:table})",
      "\t.groupBy(${3:column})",
      "\t.having(({ $4 }) => $5);",
      ""
    ],
    "description": "Select with group by and having",
  },
  "$with": {
    "prefix": [
      "db__with",
      "$with"
    ],
    "scope": "javascript,typescript",
    "body": [
      "db.\\$with(${1:alias}).as(",
      "\t\tdb.select({",
      "\t\t\t$2,",
      "\t\t})",
      "\t\t.from(${3:table})",
      "\t\t.where(",
      "\t\t\t$4,",
      "\t\t)",
      "\t);",
      ""
    ],
    "description": "With clause with alias (internal)",
  },
  "with": {
    "prefix": [
      "db_with",
      "with"
    ],
    "scope": "javascript,typescript",
    "body": [
      "db.with(${1:alias})",
      "\t.select({",
      "\t\t$2,",
      "\t})",
      "\t.from(${1:alias})",
      "\t.where(",
      "\t\t$3,",
      "\t)",
      "\t.returning({",
      "\t\t$4,",
      "\t});",
      ""
    ],
    "description": "With clause with alias",
  },
  "update": {
    "prefix": [
      "db_update",
      "update"
    ],
    "scope": "javascript,typescript",
    "body": [
      "await db.update(${1:table}).set({",
      "\t\t$2,",
      "\t}).where(",
      "\t\t$3,",
      "\t);",
      ""
    ],
    "description": "Update query",
  },
  "insert": {
    "prefix": [
      "db_insert",
      "insert"
    ],
    "scope": "javascript,typescript",
    "body": [
      "await db.insert(${1:table}).values({",
      "\t\t$2,",
      "\t});",
      ""
    ],
    "description": "Insert query",
  },
  "onConflictDoNothing": {
    "prefix": [
      "db_on_conflict_do_nothing",
      "onConflictDoNothing"
    ],
    "scope": "javascript,typescript",
    "body": [
      "await db.insert(${1:table}).values({",
      "\t\t$2,",
      "\t}).onConflictDoNothing({",
      "\t\ttarget: ${3:column},",
      "\t});",
      ""
    ],
    "description": "Insert with onConflictDoNothing",
  },
  "onConflictDoUpdate": {
    "prefix": [
      "db_on_conflict_do_update",
      "onConflictDoUpdate"
    ],
    "scope": "javascript,typescript",
    "body": [
      "await db.insert(${1:table}).values({",
      "\t\t$2,",
      "\t}).onConflictDoUpdate({",
      "\t\ttarget: ${3:column},",
      "\t\ttargetWhere: {",
      "\t\t\t$4,",
      "\t\t},",
      "\t\tset: {",
      "\t\t\t$5,",
      "\t\t},",
      "\t\tsetWhere: {",
      "\t\t\t$6,",
      "\t\t},",
      "\t});",
      ""
    ],
    "description": "Insert with onConflictDoUpdate (target, set, setWhere)",
  },
  "onDuplicateKeyUpdate": {
    "prefix": [
      "db_on_duplicate_key_update",
      "onDuplicateKeyUpdate"
    ],
    "scope": "javascript,typescript",
    "body": [
      "await db.insert(${1:table}).values({",
      "\t\t$2,",
      "\t}).onDuplicateKeyUpdate({",
      "\t\tset: {",
      "\t\t\t$3,",
      "\t\t},",
      "\t});",
      ""
    ],
    "description": "Insert with onDuplicateKeyUpdate",
  },
  "delete": {
    "prefix": [
      "db_delete",
      "delete"
    ],
    "scope": "javascript,typescript",
    "body": [
      "await db.delete(${1:table}).where(",
      "\t\t$2,",
      "\t);",
      ""
    ],
    "description": "Delete query",
  },
  "leftJoin": {
    "prefix": [
      "db_left_join",
      "leftJoin"
    ],
    "scope": "javascript,typescript",
    "body": [
      "await db.select({",
      "\t\t$1,",
      "\t})",
      "\t.from(${2:table})",
      "\t.leftJoin(${3:table}, ${4:condition});",
      ""
    ],
    "description": "Select with left join",
  },
  "rightJoin": {
    "prefix": [
      "db_right_join",
      "rightJoin"
    ],
    "scope": "javascript,typescript",
    "body": [
      "await db.select({",
      "\t\t$1,",
      "\t})",
      "\t.from(${2:table})",
      "\t.rightJoin(${3:table}, ${4:condition});",
      ""
    ],
    "description": "Select with right join",
  },
  "innerJoin": {
    "prefix": [
      "db_inner_join",
      "innerJoin"
    ],
    "scope": "javascript,typescript",
    "body": [
      "await db.select({",
      "\t\t$1,",
      "\t})",
      "\t.from(${2:table})",
      "\t.innerJoin(${3:table}, ${4:condition});",
      ""
    ],
    "description": "Select with inner join",
  },
  "fullJoin": {
    "prefix": [
      "db_full_join",
      "fullJoin"
    ],
    "scope": "javascript,typescript",
    "body": [
      "await db.select({",
      "\t\t$1,",
      "\t})",
      "\t.from(${2:table})",
      "\t.fullJoin(${3:table}, ${4:condition});",
      ""
    ],
    "description": "Select with full join",
  },
  "eq": {
    "prefix": [
      "db_eq",
      "eq"
    ],
    "scope": "javascript,typescript",
    "body": "eq(${1:column}, ${2:value})",
    "description": "Equality condition",
  },
  "ne": {
    "prefix": [
      "db_ne",
      "ne"
    ],
    "scope": "javascript,typescript",
    "body": "ne(${1:column}, ${2:value})",
    "description": "Not equal condition",
  },
  "gt": {
    "prefix": [
      "db_gt",
      "gt"
    ],
    "scope": "javascript,typescript",
    "body": "gt(${1:column}, ${2:value})",
    "description": "Greater than condition",
  },
  "gte": {
    "prefix": [
      "db_gte",
      "gte"
    ],
    "scope": "javascript,typescript",
    "body": "gte(${1:column}, ${2:value})",
    "description": "Greater than or equal condition",
  },
  "lt": {
    "prefix": [
      "db_lt",
      "lt"
    ],
    "scope": "javascript,typescript",
    "body": "lt(${1:column}, ${2:value})",
    "description": "Less than condition",
  },
  "lte": {
    "prefix": [
      "db_lte",
      "lte"
    ],
    "scope": "javascript,typescript",
    "body": "lte(${1:column}, ${2:value})",
    "description": "Less than or equal condition",
  },
  "isNull": {
    "prefix": [
      "db_is_null",
      "isNull"
    ],
    "scope": "javascript,typescript",
    "body": "isNull(${1:column})",
    "description": "Check if column is null",
  },
  "isNotNull": {
    "prefix": [
      "db_is_not_null",
      "isNotNull"
    ],
    "scope": "javascript,typescript",
    "body": "isNotNull(${1:column})",
    "description": "Check if column is not null",
  },
  "inArray": {
    "prefix": [
      "db_in_array",
      "inArray"
    ],
    "scope": "javascript,typescript",
    "body": "inArray(${1:column}, ${2:array})",
    "description": "Check if column value is in array",
  },
  "notInArray": {
    "prefix": [
      "db_not_in_array",
      "notInArray"
    ],
    "scope": "javascript,typescript",
    "body": "notInArray(${1:column}, ${2:array})",
    "description": "Check if column value is not in array",
  },
  "exists": {
    "prefix": [
      "db_exists",
      "exists"
    ],
    "scope": "javascript,typescript",
    "body": "exists(${1:column})",
    "description": "Exists condition",
  },
  "notExists": {
    "prefix": [
      "db_not_exists",
      "notExists"
    ],
    "scope": "javascript,typescript",
    "body": "notExists(${1:column})",
    "description": "Not exists condition",
  },
  "between": {
    "prefix": [
      "db_between",
      "between"
    ],
    "scope": "javascript,typescript",
    "body": "between(${1:column}, ${2:from}, ${3:to})",
    "description": "Between condition",
  },
  "notBetween": {
    "prefix": [
      "db_not_between",
      "notBetween"
    ],
    "scope": "javascript,typescript",
    "body": "notBetween(${1:column}, ${2:from}, ${3:to})",
    "description": "Not between condition",
  },
  "like": {
    "prefix": [
      "db_like",
      "like"
    ],
    "scope": "javascript,typescript",
    "body": "like(${1:column}, ${2:value})",
    "description": "Like condition",
  },
  "ilike": {
    "prefix": [
      "db_ilike",
      "ilike"
    ],
    "scope": "javascript,typescript",
    "body": "ilike(${1:column}, ${2:value})",
    "description": "Case-insensitive like condition",
  },
  "notIlike": {
    "prefix": [
      "db_not_ilike",
      "notIlike"
    ],
    "scope": "javascript,typescript",
    "body": "notIlike(${1:column}, ${2:value})",
    "description": "Case-insensitive not like condition",
  },
  "not": {
    "prefix": [
      "db_not",
      "not"
    ],
    "scope": "javascript,typescript",
    "body": "not(${1:condition})",
    "description": "Negate a condition",
  },
  "and": {
    "prefix": [
      "db_and",
      "and"
    ],
    "scope": "javascript,typescript",
    "body": "and(${1:condition}, ${2:condition})",
    "description": "Logical AND condition",
  },
  "or": {
    "prefix": [
      "db_or",
      "or"
    ],
    "scope": "javascript,typescript",
    "body": "or(${1:condition}, ${2:condition})",
    "description": "Logical OR condition",
  },
  "arrayContains": {
    "prefix": [
      "db_array_contains",
      "arrayContains"
    ],
    "scope": "javascript,typescript",
    "body": "arrayContains(${1:column}, ${2:value})",
    "description": "Check if array contains value",
  },
  "arrayContained": {
    "prefix": [
      "db_array_contained",
      "arrayContained"
    ],
    "scope": "javascript,typescript",
    "body": "arrayContained(${1:column}, ${2:value})",
    "description": "Check if array is contained",
  },
  "arrayOverlaps": {
    "prefix": [
      "db_array_overlaps",
      "arrayOverlaps"
    ],
    "scope": "javascript,typescript",
    "body": "arrayOverlaps(${1:column}, ${2:value})",
    "description": "Check if arrays overlap",
  }
}